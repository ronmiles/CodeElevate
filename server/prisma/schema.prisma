// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       UserProfile?
  learningGoals LearningGoal[]
  exercises     Exercise[]
  progress      Progress[]
}

model UserProfile {
  id                    String    @id @default(uuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id])
  skillLevel            SkillLevel
  preferredLanguages    ProgrammingLanguage[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model ProgrammingLanguage {
  id                String        @id @default(uuid())
  name              String        @unique
  profiles          UserProfile[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model LearningGoal {
  id                String              @id @default(uuid())
  title             String
  description       String?
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  status            GoalStatus
  deadline          DateTime?
  exercises         Exercise[]
  roadmap           Roadmap?
  language          String?             // Store language name directly as string
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Roadmap {
  id          String       @id @default(uuid())
  goalId      String       @unique
  goal        LearningGoal @relation(fields: [goalId], references: [id])
  checkpoints Checkpoint[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Checkpoint {
  id              String             @id @default(uuid())
  title           String
  description     String
  order           Int
  status          CheckpointStatus
  roadmapId       String
  roadmap         Roadmap            @relation(fields: [roadmapId], references: [id])
  exercises       Exercise[]
  learningMaterial LearningMaterial?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([roadmapId, order])
}

model LearningMaterial {
  id                    String    @id @default(uuid())
  checkpointId          String    @unique
  checkpoint            Checkpoint @relation(fields: [checkpointId], references: [id])
  title                 String
  overview              String    @db.Text
  sections              Json      // Array of {heading: string, body: string}
  estimatedTimeMinutes  Int       @default(5)
  codeExamples          Json?     // Array of {language: string, code: string, explanation: string}
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Exercise {
  id                String              @id @default(uuid())
  title             String
  description       String
  difficulty        DifficultyLevel
  language          String              // Store language name directly as string
  goalId            String
  goal              LearningGoal        @relation(fields: [goalId], references: [id])
  checkpointId      String?
  checkpoint        Checkpoint?         @relation(fields: [checkpointId], references: [id])
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  initialCode       String?             @db.Text
  solution          String?             @db.Text
  hints             String[]
  testCases         Json?
  progress          Progress[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Progress {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  exerciseId  String
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  status      ProgressStatus
  code        String?   @db.Text
  grade       Int?
  attempts    Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, exerciseId], name: "userId_exerciseId")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum CheckpointStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
